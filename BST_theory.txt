--  Binary Search Tree
    - A Binary Tree
        -> 1. Left subtree nodes < Root
        -> 2. Right subtree nodes > Root
        -> 3. Left and Right subtree are also BST with no duplicates
        
    - Special Property :    In-order Traversal of BST gives a sorted sequence

    - BST Search (BST makes Search efficient)
        -> O(height) -> log(n)

    - Skewed Trees

    - Strategy:
        -> Most problems will be solved using recursion ie by dividing into sub-problems and making recursive calls
           on subtrees.
           
    - Build a BST

    - Search in a BST

    - Delete a Node
        Cases:
            1. No child (Leaf Node)
            2. One child
            3. Two children

            Case 1: No child (Leaf Node)
                -> Delete Node
                -> & return null to parent

            Case 2: One child
                -> Delete Node
                -> & replace with child node

            Case 3: Two children
                -> Replace value with in-order successor (Left most in right subtree)
                -> Delete the node for in-order successor
            